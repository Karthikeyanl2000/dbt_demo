name: Staging CI/CD For dbt

on:
  pull_request:
    branches:
      - 'staging'

jobs:
  check-merge-conflicts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install GitHub CLI
        run: |
          sudo apt-get install gh
          gh auth status || echo "GitHub CLI authentication needed"

      - name: Identify PR Author and Latest Commit Pusher
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          PR_AUTHOR=$(gh pr view $PR_NUMBER --json author -q .author.login)
          LATEST_COMMITTER=$(git log -1 --pretty=format:'%an')

          echo "PR_AUTHOR=$PR_AUTHOR" >> $GITHUB_ENV
          echo "LATEST_COMMITTER=$LATEST_COMMITTER" >> $GITHUB_ENV

      - name: Check for Merge Conflicts
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          CONFLICTS=$(gh pr view $PR_NUMBER --json mergeable -q .mergeable)

          if [[ "$CONFLICTS" == "CONFLICTING" ]]; then
            echo "❌ Merge conflicts detected!"
            echo "LATEST_COMMITTER=$LATEST_COMMITTER" >> $GITHUB_ENV
            exit 1
          else
            echo "✅ No merge conflicts detected."
          fi

      - name: Assign the Latest Committer to Resolve Conflicts
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          gh pr edit $PR_NUMBER --add-assignee "$LATEST_COMMITTER"
          gh pr comment $PR_NUMBER --body "@${{ env.LATEST_COMMITTER }} Please resolve the merge conflicts before merging into staging."


  # docker-build-staging:
  #   needs: staging-test
  #   runs-on: ubuntu-latest
  #   environment: staging 

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v3

  #     - name: Get Current Date
  #       id: date
  #       run: echo "BUILD_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Build Docker Image for Staging
  #       run: |
  #         docker build -t karthil/ogsgrafana-oss:dbt_engine-staging-${{ env.BUILD_DATE }} .

  #     - name: Push Docker Image
  #       run: |
  #         docker push karthil/ogsgrafana-oss:dbt_engine-staging-${{ env.BUILD_DATE }}
      
  #     - name: Echo Build Info
  #       run: |
  #         echo "Docker Image pushed: karthil/ogsgrafana-oss:dbt_engine-staging-${{ env.BUILD_DATE }}"

  # deploy-staging:
  #   needs: docker-build-staging
  #   runs-on: ubuntu-latest
  #   environment: staging  

  #   steps:
  #     - name: Connect to Staging Server and Deploy
  #       uses: appleboy/ssh-action@v0.1.7
  #       with:
  #         host: ${{ secrets.STAGING_SERVER_HOST }}
  #         username: ${{ secrets.STAGING_SERVER_USER }}
  #         password: ${{ secrets.STAGING_SERVER_PASSWORD }}  # Use SSH key if possible instead of password
  #         script: |
  #           echo "Pulling latest Docker image..."
  #           docker pull karthil/ogsgrafana-oss:dbt_engine-staging-${{ env.BUILD_DATE }}

  #           echo "Stopping and removing existing container..."
  #           docker stop dbt_staging_container || true
  #           docker rm dbt_staging_container || true

  #           echo "Running new container..."
  #           docker run -d --name dbt_staging_container \
  #             -e DBT_ENV=staging \
  #             -p 8001:8000 \
  #             karthil/ogsgrafana-oss:dbt_engine-staging-${{ env.BUILD_DATE }}

  #           echo "Staging deployment completed successfully!"
